{"mappings":"gfAEE,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAIPQ,SAASC,cAAc,SAASC,iBAAiB,UAAU,SAAUC,GACnEA,EAAMC,iBAWN,IAVA,IAAMC,EAAaL,SAASC,cAAc,uBACpCK,EAAYN,SAASC,cAAc,sBACnCM,EAAcP,SAASC,cAAc,wBACrCO,EAAQC,SAASJ,EAAWK,OAC5BC,EAAOF,SAASH,EAAUI,OAC1BE,EAASH,SAASF,EAAYG,OAEhCG,EAAeL,EACfM,EAAcH,EAETI,EAAI,EAAGA,GAAKH,EAAQG,IAC3BzB,EAAcyB,EAAGF,GACdG,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjBJ,EAAA8B,OAAgBC,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAEvE6B,OAAM,SAAAJ,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClBJ,EAAA8B,OAAgBI,QAAQ,sBAAqCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAGvEqB,GAAgBC,EAGlBT,EAAWK,MAAQ,GACnBJ,EAAUI,MAAQ,GAClBH,EAAYG,MAAQ,E","sources":["src/js/03-promises.js"],"sourcesContent":["\n  // Підключення бібліотеки Notiflix\n  const notiflix = require('notiflix');\n\n  function createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n\n  document.querySelector('.form').addEventListener('submit', function (event) {\n    event.preventDefault();\n    const delayInput = document.querySelector('input[name=\"delay\"]');\n    const stepInput = document.querySelector('input[name=\"step\"]');\n    const amountInput = document.querySelector('input[name=\"amount\"]');\n    const delay = parseInt(delayInput.value);\n    const step = parseInt(stepInput.value);\n    const amount = parseInt(amountInput.value);\n\n    let currentDelay = delay;\n    let currentStep = step;\n\n    for (let i = 1; i <= amount; i++) {\n      createPromise(i, currentDelay)\n        .then(({ position, delay }) => {\n          notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n\n      currentDelay += currentStep;\n    }\n\n    delayInput.value = '';\n    stepInput.value = '';\n    amountInput.value = '';\n  })"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","delay1","parseInt","value","step","amount","currentDelay","currentStep","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.9981cfe2.js.map"}